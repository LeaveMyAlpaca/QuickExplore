{
  "version": 3,
  "sources": ["../../@tauri-apps/plugin-global-shortcut/dist-js/index.js"],
  "sourcesContent": ["import { Channel, invoke } from '@tauri-apps/api/core';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Register global shortcuts.\n *\n * @module\n */\n/**\n * Register a global shortcut or a list of shortcuts.\n *\n * The handler is called when any of the registered shortcuts are pressed by the user.\n *\n * If the shortcut is already taken by another application, the handler will not be triggered.\n * Make sure the shortcut is as unique as possible while still taking user experience into consideration.\n *\n * @example\n * ```typescript\n * import { register } from '@tauri-apps/plugin-global-shortcut';\n *\n * // register a single hotkey\n * await register('CommandOrControl+Shift+C', (event) => {\n *   if (event.state === \"Pressed\") {\n *       console.log('Shortcut triggered');\n *   }\n * });\n *\n * // or register multiple hotkeys at once\n * await register(['CommandOrControl+Shift+C', 'Alt+A'], (event) => {\n *   console.log(`Shortcut ${event.shortcut} triggered`);\n * });\n * ```\n *\n * @param shortcut Shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n * @param handler Shortcut handler callback - takes the triggered shortcut as argument\n *\n * @since 2.0.0\n */\nasync function register(shortcuts, handler) {\n    const h = new Channel();\n    h.onmessage = handler;\n    return await invoke('plugin:global-shortcut|register', {\n        shortcuts: Array.isArray(shortcuts) ? shortcuts : [shortcuts],\n        handler: h\n    });\n}\n/**\n * Unregister a global shortcut or a list of shortcuts.\n *\n * @example\n * ```typescript\n * import { unregister } from '@tauri-apps/plugin-global-shortcut';\n *\n * // unregister a single hotkey\n * await unregister('CmdOrControl+Space');\n *\n * // or unregister multiple hotkeys at the same time\n * await unregister(['CmdOrControl+Space', 'Alt+A']);\n * ```\n *\n * @param shortcut shortcut definition (modifiers and key separated by \"+\" e.g. CmdOrControl+Q), also accepts a list of shortcuts\n *\n * @since 2.0.0\n */\nasync function unregister(shortcuts) {\n    return await invoke('plugin:global-shortcut|unregister', {\n        shortcuts: Array.isArray(shortcuts) ? shortcuts : [shortcuts]\n    });\n}\n/**\n * Unregister all global shortcuts.\n *\n * @example\n * ```typescript\n * import { unregisterAll } from '@tauri-apps/plugin-global-shortcut';\n * await unregisterAll();\n * ```\n * @since 2.0.0\n */\nasync function unregisterAll() {\n    return await invoke('plugin:global-shortcut|unregister_all', {});\n}\n/**\n * Determines whether the given shortcut is registered by this application or not.\n *\n * If the shortcut is registered by another application, it will still return `false`.\n *\n * @example\n * ```typescript\n * import { isRegistered } from '@tauri-apps/plugin-global-shortcut';\n * const isRegistered = await isRegistered('CommandOrControl+P');\n * ```\n *\n * @param shortcut shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n *\n * @since 2.0.0\n */\nasync function isRegistered(shortcut) {\n    return await invoke('plugin:global-shortcut|is_registered', {\n        shortcut\n    });\n}\n\nexport { isRegistered, register, unregister, unregisterAll };\n"],
  "mappings": ";;;;;;AAwCA,eAAe,SAAS,WAAW,SAAS;AACxC,QAAM,IAAI,IAAI,QAAQ;AACtB,IAAE,YAAY;AACd,SAAO,MAAM,OAAO,mCAAmC;AAAA,IACnD,WAAW,MAAM,QAAQ,SAAS,IAAI,YAAY,CAAC,SAAS;AAAA,IAC5D,SAAS;AAAA,EACb,CAAC;AACL;AAmBA,eAAe,WAAW,WAAW;AACjC,SAAO,MAAM,OAAO,qCAAqC;AAAA,IACrD,WAAW,MAAM,QAAQ,SAAS,IAAI,YAAY,CAAC,SAAS;AAAA,EAChE,CAAC;AACL;AAWA,eAAe,gBAAgB;AAC3B,SAAO,MAAM,OAAO,yCAAyC,CAAC,CAAC;AACnE;AAgBA,eAAe,aAAa,UAAU;AAClC,SAAO,MAAM,OAAO,wCAAwC;AAAA,IACxD;AAAA,EACJ,CAAC;AACL;",
  "names": []
}
